%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Version of the simple restaurant domain meant to be used with the associated %
% simulator                                                                    %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Number of steps %%
#const n = 2.
%------------------------------------------------------------------------------%
#const wnum=1.   % Total number of waiters
#const cnum=2.   % Total number of customers
#const tnum=2.   % Total number of tables
#const maxcap=2. % Maximum capacity of tables

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
sorts
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Step range %%
#step = 0..n.
%------------------------------------------------------------------------------%

%% Population %%
#waiter=[w][1..wnum].
#customer=[c][1..cnum].
#employee = #waiter + {agent}.
%------------------------------------------------------------------------------%
%% Environment %%
#room = {mainroom, kitchen, entrance}.
#table = [table][1..tnum].
#chair = [chair][1..maxcap][t][1..tnum].

#customerfurniture = #table + #chair.               
#otherfurniture = {counter, door}.                  
#furniture = #customerfurniture + #otherfurniture.

#num = 1..maxcap.
%------------------------------------------------------------------------------%
%% Nodes %%
#node = {a,b,c,d,e,f,h}.
%------------------------------------------------------------------------------%

%% Boolean type (for observations) %%
#boolean = {true, false}.
%------------------------------------------------------------------------------%
%% Fluents %%
#inertial_fluent = 
%% CUSTOMER-RELATED :
                   iswaiting(#customer(Cu))
                 + iswith(#employee(E),#customer(Cu))
                 + isonchair(#customer(Cu),#chair(Ch))
                 + wantsbill(#customer(Cu))
                 + haspaid(#customer(Cu))
%% EMPLOYEE-RELATED : 
                 + currentlocation(#employee(E), #node(N))
%% FURNITURE-RELATED :
                 + isfree(#customerfurniture(Fr))
                 + nextseat(#table(T), #num(K)).

#defined_special_fluent = 
                   isfree(#furniture(Fr)).

#observable_fluent = 
                   bill_wave(#customer(Cu)).

#fluent = #inertial_fluent + #defined_special_fluent + #observable_fluent.
%------------------------------------------------------------------------------%
%% Actions %%
#actionseat = seat_customer(#employee(E), #customer(Cu), #table(T)).
#actioncome = pick_customer(#employee(E), #customer(Cu)).
#actionpay = give_bill(#employee(E), #customer(Cu)).
#actiongo = go_to(#employee(E), #node(N)).

#action = 
                    #actionseat             % Agent assigns a customer to a chair
                    + #actioncome           % Tells a customer to come with agent
                    + #actionpay            % Agent gives bill to customer
                    + #actiongo.            % Agent moves to a predefined node


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
predicates
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Paths %%
edge(#node, #node).
areassociated(#node, #furniture).
%------------------------------------------------------------------------------%
%% Furniture %%
hascapacity(#table, #num).
isattable(#chair, #table).
chairnumber(#chair, #num).
%------------------------------------------------------------------------------%

%% Goals %%
goal(#step).
success().
something_happened(#step).
%------------------------------------------------------------------------------%
%% Fluents and actions
holds(#fluent, #step).
occurs(#action, #step).
%------------------------------------------------------------------------------%
%% Observations %%
obs(#fluent, #boolean, #step).
hpd(#action, #step).
%------------------------------------------------------------------------------%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
rules
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%------------------------------------------------------------------------------%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%% INITIAL SITUATION TO BE SET BELOW: %%%%%%%%%%%%%%%%%%%%%%
%b_init
%% Paths in the restaurant %%
edge(a,b).
edge(b,a).  edge(b,c).
edge(c,b).  edge(c,d).
edge(d,c).  edge(d,e).  edge(d,h).
edge(e,d).  edge(e,f).
edge(f,e).
edge(h,d).
%------------------------------------------------------------------------------%
%% Nodes-furniture associations %%
areassociated(e,door).
areassociated(f,table1).
areassociated(f,table2).
areassociated(h,table2).
areassociated(a,counter).
areassociated(b,counter).
%------------------------------------------------------------------------------%
%% Capacities of tables %%
hascapacity(table1, 2).
hascapacity(table2, 2).
%------------------------------------------------------------------------------%
%% Chairs statuses %%
isattable(chair1t1, table1).
isattable(chair2t1, table1).
isattable(chair1t2, table2).
isattable(chair2t2, table2).
chairnumber(chair1t1, 1).
chairnumber(chair2t1, 2).
chairnumber(chair1t2, 1).
chairnumber(chair2t2, 2).
holds(nextseat(table1, 2), 0).
holds(nextseat(table2, 1), 0).
%------------------------------------------------------------------------------%
%% Location of people %%
holds(currentlocation(agent, f), 0).
holds(currentlocation(w1, a), 0).
holds(isonchair(c1,chair1t1),0).
holds(iswaiting(c2), 0).
%e_init
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%------------------------------------------------------------------------------%

%% Inertia axiom %%
holds(F, I+1):- #fluent(F), holds(F,I), not -holds(F, I+1).
-holds(F, I+1):- #fluent(F), -holds(F, I), not holds(F, I+1).
%------------------------------------------------------------------------------%
%% Closed World Assumption for actions %%
-occurs(A,I):- not occurs(A,I).
%------------------------------------------------------------------------------%
%% Non-simultaneity of actions %%
:- occurs(A1,I), occurs(A2,I), A1!=A2.
%------------------------------------------------------------------------------%
%% Special CWA for special defined fluents (default status = true) %%
holds(F, I):- #defined_special_fluent(F), not -holds(F, I).
%------------------------------------------------------------------------------%

%% Simple planning module %%
success:- goal(I).
:- not success.
occurs(A,I) | -occurs(A,I) :- not goal(I).
something_happened(I):- occurs(A,I).
:- goal(I), not goal(I-1), J<I, not something_happened(J).

%------------------------------------------------------------------------------%

%------------------------------------------------------------------------------%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%% GOALS TO BE SET BELOW: %%%%%%%%%%%%%%%%%%%%%%%%%%%%
%b_goal
%goal(I):- holds(haspaid(c1),I).
goal(I):- holds(currentlocation(agent,e),I).
%e_goal
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%------------------------------------------------------------------------------%

%------------------------------------------------------------------------------%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%% OBSERVATIONS TO BE SET BELOW: %%%%%%%%%%%%%%%%%%%%%%%%%
%b_obs
obs(1596649604.9990742,true,0).
obs(1596649605.899677,true,1).
obs(1596649606.1998734,true,1).
obs(1596649606.8002675,true,2).
obs(1596649607.1054637,true,2).
obs(1596649607.7058573,true,3).
obs(1596649608.0060542,true,3).
obs(1596649608.9066558,true,4).
obs(1596649609.807246,true,5).
obs(1596649610.107455,true,5).
obs(1596649610.7078485,true,6).
obs(1596649611.013032,true,6).
