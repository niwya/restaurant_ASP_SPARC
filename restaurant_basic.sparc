% Constants used %
#const wnum=1.   % Total number of waiters
#const cnum=2.   % Total number of customers
#const tnum=2.   % Total number of tables
#const maxcap=2. % Maximum capacity of tables
%----------------------------------------------------------------------------------------%
% Number of steps %
#const n=2.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
sorts 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Step range %%
#step = 0..n.
%----------------------------------------------------------------------------------------%
%% Population %%
#waiter=[w][1..wnum].
#customer=[c][1..cnum].
#employee = #waiter + {agent}.
%----------------------------------------------------------------------------------------%
%% Environment %%
#room = {mainroom, kitchen, entrance}.
#table = [table][1..tnum].
#chair = [chair][1..maxcap][t][1..tnum].

#customerfurniture = #table + #chair.               %% Furniture that can be free/occupied
#otherfurniture = {counter, door}.                  %% "Inert" funiture 
#furniture = #customerfurniture + #otherfurniture.  %% All types of furniture
%----------------------------------------------------------------------------------------%
%% Paths %%
#node = {a,b,c,d,h,e,f}.
%----------------------------------------------------------------------------------------%
%% Boolean type for observations %%
#boolean = {true,false}.
%----------------------------------------------------------------------------------------%
%% Fluents %%
% INERTIAL FLUENTS : can be directly/indirectly changed by actions %
#observable_fluent= bill_wave(#customer(Cu)).
#inertial_fluent=
% CUSTOMER PLACEMENT-RELATED FLUENTS:
                    isonchair(#customer(Cu), #chair(Ch))
                    + isattable(#chair(Ch), #table(T))
                    + isfree(#customerfurniture(Fr)) 
% LOCATION-RELATED FLUENTS:
                    + currentlocation(#employee(E), #node(N)) 
% CUSTOMER-RELATED FLUENTS:
                    + iswaiting(#customer(Cu))
                    + iswith(#employee(E),#customer(Cu))
                    + wants_bill(#customer(Cu))
                    + haspaid(#customer(Cu)) 
% OBSERVATION-RELATED FLUENTS:               
                    + #observable_fluent.

#fluent = #inertial_fluent.
%----------------------------------------------------------------------------------------%
%% Actions %%
#actionseat = seat_customer(#employee(E), #customer(Cu), #chair(Ch)).
#actioncome = pick_customer(#employee(E), #customer(Cu)).
#actionpay = give_bill(#employee(E), #customer(Cu)).
#actiongo = go_to(#employee(E), #node(N)).

#action = 
                    #actionseat                      % Agent assigns a customer to a chair
                    + #actioncome                    % Tells a customer to come with agent
                    + #actionpay                     % Agent gives bill to customer
                    + #actiongo.                     % Agent moves to a predefined node

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
predicates
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Paths %%
edge(#node, #node).
areassociated(#node, #furniture).
%----------------------------------------------------------------------------------------%
%% Goal %%
goal(#step).
success().
something_happened(#step).
%----------------------------------------------------------------------------------------%
%% Gestion of fluents and actions %%
holds(#fluent, #step).
occurs(#action, #step).
%----------------------------------------------------------------------------------------%
%% Gestion of observations %%
observed(#fluent, #boolean, #step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
rules
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% FIXED RULES %%
edge(a,b).
edge(b,a).  edge(b,c).
edge(c,b).  edge(c,d).
edge(d,c).  edge(d,e).  edge(d,h).
edge(e,d).  edge(e,f).
edge(f,e).
edge(h,d).
% Commutativity of the 'edge' predicate is not clearly stated as rule but no need %
%----------------------------------------------------------------------------------------%
%% Location of chairs at tables %%
holds(isattable(chair1t1, table1),0).
holds(isattable(chair2t1, table1),0).
holds(isattable(chair1t2, table2),0).
holds(isattable(chair2t2, table2),0).
%----------------------------------------------------------------------------------------%

%----------------------------------------------------------------------------------------%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%% INITIAL SITUATION TO BE SET BELOW: %%%%%%%%%%%%%%%%%%%%%%%%%%%
%b_init
holds(iswaiting(c1),0).
holds(currentlocation(agent,e),0). 
holds(currentlocation(w1,a),0).
%e_init
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%----------------------------------------------------------------------------------------%

%% SIMPLE PLANNING MODULE %%
%% Failure is not an option %%
success:- goal(I).
:- not success.
occurs(A,I) | -occurs(A,I) :- not goal(I).
%% Procrastinating is not an option %%
something_happened(I):- occurs(A,I).
:- goal(I), not goal(I-1), J<I, not something_happened(J).

%----------------------------------------------------------------------------------------%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% GOALS TO BE SET BELOW: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%b_goal
goal(I):- holds(iswith(agent,c1),I).
%e_goal
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%----------------------------------------------------------------------------------------%

%----------------------------------------------------------------------------------------%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%% OBSERVATIONS TO BE SET BELOW: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%b_obs
%e_obs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%----------------------------------------------------------------------------------------%

%% PERMANENT RULES %%
%% Inertia axiom %%
holds(F, I+1):- #inertial_fluent(F), holds(F,I), not -holds(F, I+1).
-holds(F, I+1):- #inertial_fluent(F), -holds(F, I), not holds(F, I+1).
%----------------------------------------------------------------------------------------%
%% Closed World Assumption for actions (if not known to occur, doesnt occur)  %%
-occurs(A,I):- not occurs(A,I).
%----------------------------------------------------------------------------------------%
%% Non-simultaneity of actions %%
:- occurs(A1,I), occurs(A2,I), A1!=A2.
%----------------------------------------------------------------------------------------%
%% Reality check %%
:- observed(F,true,I), -holds(F,I).
:- observed(F,false,I), holds(F,I).
%----------------------------------------------------------------------------------------%

%% CHAIRS %%
%% A chair is free unless stated otherwise %%
holds(isfree(Fr),I):- not -holds(isfree(Fr),I).
%----------------------------------------------------------------------------------------%
%% A chair is not free if a customer is sitting on it %%
-holds(isfree(Fr),I):- #chair(Fr), holds(isonchair(Cu,Fr),I).
%----------------------------------------------------------------------------------------%
%% Two customers cannot share the same chair at the same time %%
-holds(isonchair(Cu2,Ch),I):- holds(isonchair(Cu1,Ch),I), Cu1!=Cu2.
%----------------------------------------------------------------------------------------%
%% A customer cannot be on two chairs at the same time %% 
-holds(isonchair(Cu,Ch1),I):- holds(isonchair(Cu,Ch2),I), Ch1!=Ch2.
%----------------------------------------------------------------------------------------%
%% A chair cannot be at two tables at the same time %%
-holds(isattable(Ch,T2),I):- holds(isattable(Ch,T1),I), T2!=T1.
%----------------------------------------------------------------------------------------%
%% If customer Cu is not known to be on chair Ch, then he is not %%
-holds(isonchair(Cu, Ch), I):- not holds(isonchair(Cu, Ch), I).
%----------------------------------------------------------------------------------------%

%% TABLES %%
%% A table is not free if one of its associated chairs is not free %%
-holds(isfree(Fr),I):- #table(Fr), -holds(isfree(Ch),I), holds(isattable(Ch,Fr),I).
%----------------------------------------------------------------------------------------%


%% PATHS %%
%----------------------------------------------------------------------------------------%
%% Two nodes that are not known to be associated to a piece of furniture are not %%
-areassociated(N,F):- not areassociated(N,F).
%----------------------------------------------------------------------------------------%
%% Node e is associated to door %%
areassociated(e,door).
%% Node f is associated to table1 %%
areassociated(f,table1).
%% Nodes f and h are associated to table2 %%
areassociated(f,table2).
%areassociated(h,table2).
%% Nodes a and b are associated to the counter %%
areassociated(a,counter).
areassociated(b,counter).
%----------------------------------------------------------------------------------------%
%% If there seems not to be an edge between nodes, then there is not %%
-edge(N1,N2):- not edge(N1,N2).
%----------------------------------------------------------------------------------------%

%% MOVING AROUND %%
%% An employee can only be on one node at a time %%
-holds(currentlocation(E,N2),I):- holds(currentlocation(E,N1),I), N2!=N1.
%----------------------------------------------------------------------------------------%

%% OBSERVATIONS %%
%% Waiting process %%
-holds(iswaiting(Cu),I):- not holds(iswaiting(Cu),I).
%% Customer wanting bill %%
holds(wants_bill(Cu),I):- observed(bill_wave(Cu),true,I).
-holds(wants_bill(Cu),I):- -holds(isonchair(Cu,Ch),I).

%% ACTIONS %%
%% Causal laws %%
% pick_customer %
-holds(iswaiting(Cu),I+1):- occurs(pick_customer(E,Cu),I).
holds(iswith(E,Cu),I+1):- occurs(pick_customer(E,Cu),I).
% seat_customer %
-holds(iswith(E,Cu),I+1):- occurs(seat_customer(E,Cu,Ch),I).
holds(isonchair(Ch,Cu),I+1):- occurs(seat_customer(E,Cu,Ch),I).
% give_bill %
occurs(give_bill(E,Cu),I+1):- holds(wants_bill(Cu),I). 
holds(haspaid(Cu),I+1):- occurs(give_bill(E,Cu),I).
% go_to %
holds(currentlocation(E,N),I+1):- occurs(go_to(E,N),I), holds(currentlocation(E,M),I), N!=M.
%----------------------------------------------------------------------------------------%
%% Executability conditions %%
% pick_customer %
-occurs(pick_customer(E,Cu),I):- -holds(iswaiting(Cu),I).
-occurs(pick_customer(E,Cu),I):- -holds(currentlocation(E,e),I).
-occurs(pick_customer(E,Cu),I):- -holds(isfree(Ch),I).
-occurs(pick_customer(E,Cu2),I):- holds(iswith(E,Cu1),I), Cu2!=Cu1.
% seat_customer %
-occurs(seat_customer(E,Cu,Ch),I):- -holds(isfree(Ch),I).
-occurs(seat_customer(E,Cu,Ch),I):- -holds(iswith(E,Cu),I).
-occurs(seat_customer(E,Cu,Ch),I):- holds(currentlocation(E,N),I), holds(isattable(Ch,T),I), -areassociated(N,T).
% give_bill %
-occurs(give_bill(E,Cu),I):- -holds(wants_bill(Cu),I).
-occurs(give_bill(E,Cu),I):- holds(currentlocation(E,N),I), holds(isattable(Ch,T),I), holds(isonchair(Cu,Ch),I), -areassociated(N,T).
% go_to %
-occurs(go_to(E,N),I):- holds(currentlocation(E,M),I), -edge(M,N).
-occurs(go_to(E2,N),I):- holds(currentlocation(E1,N),I), E2!=E1.
%----------------------------------------------------------------------------------------%