%% A dynamic version of the simple restaurant setup %%

% Constants used %
#const wnum=2. % Total number of waiters
#const cnum=3. % Total number of customers
#const tnum=4. % Total number of tables
#const maxcapacity=2. % Maximum capacity of a table

% Number of steps %
#const n=1.

sorts 
% Step range %
#step = 0..n.

% Integer sort %
#int=1..20.

% Customers and waiters are referred to as a letter and a subscripted number
#waiter=[w][1..wnum].
#customer=[c][1..cnum].
#person = #customer + #waiter.

% Environment
#room = {mainroom, kitchen}.
#table = [table][1..tnum].
#chair = [chair][1..maxcapacity][t][1..tnum].
#customerfurniture = #table + #chair.
#otherfurniture = {counter}.
#furniture = #customerfurniture + #otherfurniture.

#entity = #person + #furniture.

% Actions and fluents
% Can be directly/indirectly changed by actions (subject to inertia axiom)
#inertial_fluent= isonchair(#customer(Cu),#chair(Ch)) + iswaiting(#customer(Cu)) + isattable(#chair(Ch), #table(T)) + isfree(#customerfurniture(Fr)). 
% Are defined in terms of other fluents
%#defined_fluent=. 
#fluent = #inertial_fluent.

% The agent can seat clients, might be useful to change to seat him at table on whatever free chair %
#actionseat = seat_customer(#customer(Cu), #chair(Ch)).
% The agent can move a chair to another table %
#actionmove = move_chair(#chair(Ch), #table(T)).
% The agent can bring the bill to a customer and cash in %%
#actionpay = cash_in(#customer(Cu)).
% The agent can change rooms %
#actiongo = go_to(#room(R)).

% All possible actions for the agent %
#action = #actionseat + #actionmove + #actionpay + #actiongo.

predicates
%% Gestion of fluents and actions %%
holds(#fluent, #step).
occurs(#action, #step).

%% Entities in room %% 
isinroom(#entity, #room).

%% Occupancy of a table %%
hasoccupancy(#table, #int, #step).

rules
%% CAN BE MODIFIED AT WILL TO TEST DIFFERENT SITUATIONS %%
%% Locations of tables %%
isinroom(table1, mainroom).
isinroom(table2, mainroom).
isinroom(table3, mainroom).
isinroom(table4, mainroom).
isinroom(counter, kitchen).
%isinroom(entrance, mainroom).

%% Locations of chairs at tables %%
% Gives the initial configuration, but chairs can be moved to other tables at step I
holds(isattable(chair1t1, table1),0).
holds(isattable(chair2t1, table1),0).
holds(isattable(chair1t2, table2),0).
holds(isattable(chair2t2, table2),0).
holds(isattable(chair1t3, table3),0).
holds(isattable(chair2t3, table3),0).
holds(isattable(chair1t4, table4),0).
holds(isattable(chair2t4, table4),0).

%% Locations of customers at initial step %%
holds(isonchair(c1, chair1t1),0).
holds(isonchair(c2, chair2t2),0).
holds(iswaiting(c3),0).

%% Actions %%
occurs(seat_customer(c1, chair1t2),0).
occurs(seat_customer(c2, chair1t4),0).
occurs(move_chair(chair2t1, table2),0).

%% PERMANENT RULES %%
%% Inertia axiom %%
holds(F, I+1):- #inertial_fluent(F), holds(F,I), not -holds(F, I+1).
-holds(F, I+1):- #inertial_fluent(F), -holds(F, I), not holds(F, I+1).

%% A chair is free unless stated otherwise
holds(isfree(Fr),I):- not -holds(isfree(Fr),I).

%% A chair is free if no customer is sitting on it %%
-holds(isfree(Fr),I):- #chair(Fr), holds(isonchair(Cu,Fr),I).

%% A table is not free if one of its associated chairs is free %%
-holds(isfree(Fr),I):- #table(Fr), -holds(isfree(Ch),I), holds(isattable(Ch,Fr),I).

%% It is impossible to seat a customer on an occupied chair %%
-occurs(seat_customer(Cu1,Ch),I):- holds(isonchair(Cu2,Ch),I), Cu2!=Cu1.

%% Two customers cannot share the same chair at the same time %%
-holds(isonchair(Cu2,Ch),I):- holds(isonchair(Cu1,Ch),I), Cu1!=Cu2.

%% A customer cannot be on two chairs at the same time %% 
-holds(isonchair(Cu,Ch1),I):- holds(isonchair(Cu,Ch2),I), Ch1!=Ch2.

%% If customer Cu is not known to be on chair Ch at initial step, then he is not %%
-holds(isonchair(Cu, Ch), 0):- not holds(isonchair(Cu, Ch), 0).

%% If customer is seated on a chair at step I, he will be on it at step I+1 %%
holds(isonchair(Cu,Ch), I+1):- occurs(seat_customer(Cu,Ch), I).

%% A customer, if seated, is in the room his chair is in %%
isinroom(Cu,R):- holds(isonchair(Cu,Ch),I), isinroom(Ch,R).

%% A chair in in the room its associated table is in %%
isinroom(Ch,R):- holds(isattable(Ch,T),I), isinroom(T,R).

%% An entity cannot be on multiple rooms at the same time %% 
-isinroom(E,R1):- isinroom(E,R2), R1!=R2.

%% The action of seating a customer removes him from the waiting area %%
-holds(iswaiting(Cu),I):- occurs(seat_customer(Cu,X),I).

%% A chair cannot be moved if it is not free %%
-occurs(move_chair(Ch,T),I):- -holds(isfree(Ch),I).

%% Moving a chair to another table causes this chair to be associated with the new table %%
holds(isattable(Ch,T),I+1):- occurs(move_chair(Ch,T),I).
-holds(isattable(Ch,T1),I+1):- occurs(move_chair(Ch,T2),I), T1!=T2.

%% When a client leaves a chair that has been displaced, said chair is put back at its initial table %%

%% If the agent goes to another room, it leaves the previous one %%

%% A table has occupancy O at step I %%
%hasoccupancy(T,O,I):- #chair(Ch),O=#count{Ch:holds(isattable(T,Ch),I),-holds(isfree(Ch),I)}.