%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% A dynamic version of the simple restaurant setup %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Constants used %
#const wnum=1. % Total number of waiters
#const cnum=2. % Total number of customers
#const tnum=2. % Total number of tables
#const maxcap1=2.
%#const maxcap2=4.

% Number of steps %
#const n=5.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
sorts 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Step range %%
#step = 0..n.
%----------------------------------------------------------------------------------------%
%% Population %%
#waiter=[w][1..wnum].
#customer=[c][1..cnum].
#person = #customer + #waiter.
%----------------------------------------------------------------------------------------%
%% Environment %%
#room = {mainroom, kitchen, entrance}.
#table = [table][1..tnum].
#chair = [chair][1..maxcap1][t][1..tnum].
#customerfurniture = #table + #chair.
#otherfurniture = {counter, door}.
#furniture = #customerfurniture + #otherfurniture.
%----------------------------------------------------------------------------------------%
%% Moving population + paths %%
#moving_entity= #person + {agent}.
#node = {a,b,c,d,h,e,f}.
#entity = #moving_entity + #furniture + #node.
%----------------------------------------------------------------------------------------%
%% To manage pick and drop actions %
#object=#chair.
#location=#table.
%----------------------------------------------------------------------------------------%
%% Fluents %%
% INERTIAL FLUENTS : can be directly/indirectly changed by actions (subject to inertia axiom) %
#inertial_fluent=
                    isonchair(#customer(Cu),#chair(Ch))
                    + iswaiting(#customer(Cu))
                    + isattable(#chair(Ch),#table(T))
                    + isfree(#customerfurniture(Fr)) 
                    + isinroom(#entity(E),#room(R)) 
                    + holding(#object(O)) 
                    + haspaid(#customer(Cu)) 
                    + hasleft(#customer(Cu)) 
                    + currentlocation(#node(N)) 
                    + iswithagent(#customer(Cu)). 

#fluent = #inertial_fluent.
%----------------------------------------------------------------------------------------%
%% Actions %%
#actionseat = seat_customer(#customer(Cu), #chair(Ch)).
#actioncome = pick_customer(#customer(Cu)).
#actionpay = bring_bill(#customer(Cu)).
#actiongo = go_to(#node(N)).
#actionpick = pick(#object(O),#location(L)).
#actiondrop = drop(#object(O),#location(L)).

#action = 
                    #actionseat % Agent assigns a customer to a chair
                    + #actioncome % Tells a customer to come with agent
                    + #actionpay % Agent gives bill to customer
                    + #actiongo % Agent moves to a predefined node
                    + #actionpick % Agent picks objet
                    + #actiondrop. % Agent drops object

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
predicates
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Paths %%
edge(#node,#node).
areassociated(#node,#furniture).
%----------------------------------------------------------------------------------------%
%% Goal %%
goal(#step).
success().
something_happened(#step).
%----------------------------------------------------------------------------------------%
%% Gestion of fluents and actions %%
holds(#fluent, #step).
occurs(#action, #step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
rules
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%% INITIAL SITUATION, RESTAURANT LAYOUT %%%
%% Location of tables %%
holds(isinroom(table1, mainroom),I).
holds(isinroom(table2, mainroom),I).
holds(isinroom(counter, kitchen),I).
holds(isinroom(door, entrance),I).
%----------------------------------------------------------------------------------------%
%% Location of chairs at tables %%
holds(isattable(chair1t1, table1),0).
holds(isattable(chair2t1, table1),0).
holds(isattable(chair1t2, table2),0).
holds(isattable(chair2t2, table2),0).
%----------------------------------------------------------------------------------------%
%% Paths linking nodes %% 
edge(a,b).
edge(b,a).  edge(b,c).
edge(c,b).  edge(c,d).
edge(d,c).  edge(d,e).  edge(d,h).
edge(e,d).  edge(e,f).
edge(f,e).
edge(h,d).
% Commutativity of the 'edge' predicate is not clearly stated as rule but specified here
%----------------------------------------------------------------------------------------%
%% Locations of customers %%
holds(iswaiting(c1),0).
%----------------------------------------------------------------------------------------%
%% Location of waiters+agent %%
holds(isinroom(w1, mainroom),0).
holds(currentlocation(e),0).
%----------------------------------------------------------------------------------------%
%----------------------------------------------------------------------------------------%
%% Goal %% 
% Failure is not an option %
success:- goal(I).
:- not success.
occurs(A,I) | -occurs(A,I) :- not goal(I).
% Procrastinating is not an option %
something_happened(I):- occurs(A,I).
:- goal(I), not goal(I-1), J<I, not something_happened(J).
%----------------------------------------------------------------------------------------%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% SET GOALS HERE %
goal(I):- holds(isattable(chair1t1,table2),I). %% this goal does not work
%goal(I):- holds(currentlocation(f),I). %% perfectly working goal
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%----------------------------------------------------------------------------------------%
%----------------------------------------------------------------------------------------%
%%% PERMANENT RULES %%%
%% Inertia axiom %%
holds(F, I+1):- #inertial_fluent(F), holds(F,I), not -holds(F, I+1).
-holds(F, I+1):- #inertial_fluent(F), -holds(F, I), not holds(F, I+1).
%----------------------------------------------------------------------------------------%
%% Closed World Assumption for actions (if not known to occur, doesnt occur)  %%
-occurs(A,I):- not occurs(A,I).
%----------------------------------------------------------------------------------------%
%% Non-simultaneity of actions (the agent can only do 1 thing at a said step) %%
:- occurs(A1,I), occurs(A2,I), A1!=A2.
%----------------------------------------------------------------------------------------%
%----------------------------------------------------------------------------------------%
%% CHAIRS %%
%% A chair is free unless stated otherwise %%
holds(isfree(Fr),I):- not -holds(isfree(Fr),I).
%----------------------------------------------------------------------------------------%
%% A chair is not free if a customer is sitting on it %%
-holds(isfree(Fr),I):- #chair(Fr), holds(isonchair(Cu,Fr),I).
holds(isfree(Fr),I+1):- #chair(Fr), holds(isonchair(Cu,Fr),I), occurs(seat_customer(Cu,Ch),I), Ch!=Fr.
%----------------------------------------------------------------------------------------%
%% Two customers cannot share the same chair at the same time %%
-holds(isonchair(Cu2,Ch),I):- holds(isonchair(Cu1,Ch),I), Cu1!=Cu2.
%----------------------------------------------------------------------------------------%
%% A customer cannot be on two chairs at the same time %% 
-holds(isonchair(Cu,Ch1),I):- holds(isonchair(Cu,Ch2),I), Ch1!=Ch2.
%----------------------------------------------------------------------------------------%
%% A chair cannot be at two tables at the same time %%
-holds(isattable(Ch,T2),I):- holds(isattable(Ch,T1),I), T2!=T1.
%----------------------------------------------------------------------------------------%
%% If customer Cu is not known to be on chair Ch at initial step, then he is not %%
-holds(isonchair(Cu, Ch), 0):- not holds(isonchair(Cu, Ch), 0).
%----------------------------------------------------------------------------------------%
%% An occupied chair cannot be picked up %%
-occurs(pick(Ch,T),I):- #chair(Ch), #table(T), -holds(isfree(Ch),I).
%----------------------------------------------------------------------------------------%
%% A chair that is being held is not free %%
-holds(isfree(Ch),I):- #chair(Ch), holds(holding(Ch),I).
%----------------------------------------------------------------------------------------%
%% A chair can only be picked up from a node associated with the table it is at %%
-occurs(pick(Ch,T),I):-  #chair(Ch), #table(T), -holds(currentlocation(N),I), areassociated(N,T).
%----------------------------------------------------------------------------------------%
%% Picking a chair up causes said chair not to be at the table it was at anyomre %%
-holds(isattable(Ch,T),I+1):- #chair(Ch), #table(T), occurs(pick(Ch,T),I).
%----------------------------------------------------------------------------------------%
%% A chair can be dropped at a table only if all chairs at table are full %% COMMENTED
%-occurs(drop(Ch,T),I):-  #chair(Ch), #table(T), holds(isfree(Ch),I), holds(isattable(Ch,T),I).
%----------------------------------------------------------------------------------------%
%% A chair can only be dropped at a table from a node associated with said table %%
-occurs(drop(Ch,T),I):-  #chair(Ch), #table(T), -holds(currentlocation(N),I), areassociated(N,T).
%----------------------------------------------------------------------------------------%
%% Dropping a chair at a table causes said chair to be at said table at step I+1 %%
holds(isattable(Ch,T),I+1):- #chair(Ch), #table(T), occurs(drop(Ch,T),I).
%----------------------------------------------------------------------------------------%
%% A chair can only be dropped if it has been picked up %%
-occurs(drop(Ch,T),I):- #chair(Ch), #table(T), -holds(holding(Ch),I).
%----------------------------------------------------------------------------------------%
%% Picking up a chair causes the agent to be holding the chair %%
holds(holding(O),I+1):- occurs(pick(O,L),I).
%----------------------------------------------------------------------------------------%
%% An object not known to be held is not %%
-holds(holding(O),I):- not holds(holding(O),I).
%----------------------------------------------------------------------------------------%
%% Dropping an object causes it not to be held anymore %%
-holds(holding(O),I+1):- occurs(drop(O,L),I).
%----------------------------------------------------------------------------------------%
%% A chair can only be picked up at the table it is at %%
-occurs(pick(Ch,T),I):- #chair(Ch), #table(T), -holds(isattable(Ch,T),I).
%----------------------------------------------------------------------------------------%
%----------------------------------------------------------------------------------------%
%% TABLES %%
%% A table is not free if one of its associated chairs is not free %%
-holds(isfree(Fr),I):- #table(Fr), -holds(isfree(Ch),I), holds(isattable(Ch,Fr),I).
%----------------------------------------------------------------------------------------%
%----------------------------------------------------------------------------------------%
%% ROOMS %%
%% A customer who is waiting is in the entrance %%
holds(isinroom(Cu,entrance),I):- holds(iswaiting(Cu),I).
%----------------------------------------------------------------------------------------%
%% A customer, if seated, is in the room his chair is in %%
holds(isinroom(Cu,R),I):- holds(isonchair(Cu,Ch),I), holds(isinroom(Ch,R),I).
%----------------------------------------------------------------------------------------%
%% A chair in in the room its associated table is in %%
holds(isinroom(Ch,R),I):- holds(isattable(Ch,T),I), holds(isinroom(T,R),I).
%----------------------------------------------------------------------------------------%
%% An entity cannot be on multiple rooms at the same time %% 
-holds(isinroom(E,R1),I):- holds(isinroom(E,R2),I), R1!=R2.
%----------------------------------------------------------------------------------------%
%% If a customer is in the entrance at step I, is not anymore at step I+1 and has not been steated, then he has left %%
holds(hasleft(Cu),I+1):- holds(iswaiting(Cu),I), -holds(iswaiting(Cu),I+1), -holds(isonchair(Cu,Ch),I).
%----------------------------------------------------------------------------------------%
%% If something or someone is not known to be in room R at step, then it or he is not %%
-holds(isinroom(Cu,R),0):- not holds(isinroom(Cu,R),0). 
%----------------------------------------------------------------------------------------%
%% If a customer is not known to have left at step 0, then he has not %%
-holds(hasleft(Cu),0):- not holds(hasleft(Cu),0).
%----------------------------------------------------------------------------------------%
%% A client has left if he is not in any room anymore %% COMMENTED
%holds(hasleft(Cu),I):- -holds(isinroom(Cu,R),I).
%----------------------------------------------------------------------------------------%
%----------------------------------------------------------------------------------------%
%% PATHS %%
%----------------------------------------------------------------------------------------%
%% Two nodes that are not known to be associated to a piece of furniture are not %%
-areassociated(N,F):- not areassociated(N,F).
%----------------------------------------------------------------------------------------%
%% A node associated with a piece of furniture is in the room the furniture is %%
holds(isinroom(N,R),I):- #furniture(F), areassociated(N,F), holds(isinroom(F,R),I).
%% Others have to be declared manually %%
holds(isinroom(c,mainroom),I).
%----------------------------------------------------------------------------------------%
%% Node e is associated to door %%
areassociated(e,door).
%% Node f is associated to table1 %%
areassociated(f,table1).
%% Nodes f and h are associated to table2 %%
areassociated(f,table2).
%areassociated(h,table2). %% RENDERS THE PROGRAM INCONSISTENT
%% Nodes a and b are associated to the counter %%
areassociated(a,counter).
areassociated(b,counter).
%----------------------------------------------------------------------------------------%
%% If there seems not to be an edge between nodes, then there is not %%
-edge(N1,N2):- not edge(N1,N2).
%----------------------------------------------------------------------------------------%
%% The agent can only be on one node at a time %%
-holds(currentlocation(N2),I):- holds(currentlocation(N1),I), N2!=N1.
%----------------------------------------------------------------------------------------%
%% Action go_to triggers a change in currentlocation %%
holds(currentlocation(N2),I+1):- occurs(go_to(N2),I), holds(currentlocation(N1),I), N2!=N1.
-holds(currentlocation(N1),I+1):- occurs(go_to(N2),I), holds(currentlocation(N1),I), N2!=N1.
%----------------------------------------------------------------------------------------%
%% If there is no edge between nodes, then go_to cannot occur
-occurs(go_to(N2),I):- -edge(N1,N2), holds(currentlocation(N1),I), N2!=N1.
%----------------------------------------------------------------------------------------%
%----------------------------------------------------------------------------------------%
%% PICKING UP AND SEATING %%
%% It is impossible to seat a customer on an occupied chair %%
-occurs(seat_customer(Cu1,Ch),I):- holds(isonchair(Cu2,Ch),I), Cu2!=Cu1.
%----------------------------------------------------------------------------------------%
%% If customer is seated on a chair at step I, he will be on it at step I+1 %%
holds(isonchair(Cu,Ch), I+1):- occurs(seat_customer(Cu,Ch), I).
%----------------------------------------------------------------------------------------%
%% It is impossible to seat a customer that is not with the agent %
-occurs(seat_customer(Cu,Ch),I):- -holds(iswithagent(Cu),I).
%----------------------------------------------------------------------------------------%
%% It is impossible for the agent to seat a customer if the agent is not on a node associated with the table the chair the customer will be seated on is at %
-occurs(seat_customer(Cu,Ch),I):- holds(currentlocation(N),I), holds(isattable(Ch,T),I), -areassociated(N,T).
%----------------------------------------------------------------------------------------%
%% A customer is not with the agent unless specified %%
-holds(iswithagent(Cu),I):- not holds(iswithagent(Cu),I).
%----------------------------------------------------------------------------------------%
%% The action of picking up a customer causes said customer, if he is waiting, not to be anymore %%
-holds(iswaiting(Cu),I+1):- occurs(pick_customer(Cu),I).
%----------------------------------------------------------------------------------------%
%% The action of picking up a customer causes said customer to be with agent instantly %%
holds(iswithagent(Cu),I):- occurs(pick_customer(Cu),I).
%----------------------------------------------------------------------------------------%
%% It is impossible to pick up a customer that is not waiting %%
-occurs(pick_customer(Cu),I):- -holds(iswaiting(Cu),I).
%----------------------------------------------------------------------------------------%
%----------------------------------------------------------------------------------------%
%% PAYMENT %%
%% Bringing the bill to a customer makes the haspaid fluent true for the following steps %%
holds(haspaid(Cu),I+1):- occurs(bring_bill(Cu),I).
%----------------------------------------------------------------------------------------%
%% A customer has not paid, unless clearly stated %%
-holds(haspaid(Cu),I):- not holds(haspaid(Cu),I).
%----------------------------------------------------------------------------------------%
%% The agent cannot bring the bill to a customer if he is not on a node associated with the table the client is at %%
-occurs(bring_bill(Cu),I):- holds(currentlocation(N),I), holds(isattable(Ch,T),I), -areassociated(N,T).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NOTES %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%