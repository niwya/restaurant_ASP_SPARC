% Defining a simple restaurant context for an agent to reason on

% Constants used 
#const wnum=2. % Total number of waiters
#const cnum=3. % Total number of customers
#const tnum=3. % Total number of tables
#const maxcapacity=2. % Maximum capacity of a table

sorts
% Customers and waiters are referred to as a letter and a subscripted number
#waiter=[w][1..wnum].
#customer=[c][1..cnum].
#person = #customer + #waiter.

% Objects in this domain can either be refillable or not
#jug = [jug][1..tnum]. % 1 jug per table
#basket = [basket][1..tnum]. % 1 bread basket per table
#refillable = #jug + #basket.
#cutlery = [cutlery][1..cnum]. % 1 fork+knife+spoon per client
#nonrefillable = #cutlery.
#object = #refillable + #nonrefillable.

% Consumables to refill refillable objects with 
#tapwater={sth}.
#bread={sth2}.
#consumable= #tapwater + #bread.

% Environment
#rooms = {mainroom, kitchen}.
#table = [table][1..tnum].
#chair = [chair][1..tnum][a..maxcapacity]. 

predicates
isonchair(#customer, #chair).
isattable(#chair, #table).
isempty(#table).

rules
isonchair(c1, chair1a).
isonchair(c2, chair1b).
isonchair(c3, chair3a).
isattable(chair1a, table1).
isattable(chair1b, table1).
isattable(chair1c, table1).
isattable(chair2a, table2).
isattable(chair2b, table2).
isattable(chair2c, table2).
isattable(chair3a, table1).
isattable(chair3b, table3).
isattable(chair3c, table3).



