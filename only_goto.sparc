%------------------------------------------------------------------------------%
%% CONSTANTS - All of the necessary constants %%
% Number of steps to plan on %
#const n = 4.
% Total number of waiters %
#const wnum = 1.
#const tnum = 2.

sorts

#step = 0..n.

#node = {a, b, c, d, e, f, h}.

#waiter = [w][1..wnum].
#agent = {agent}.
#employee = #waiter + #agent.

%% Locations of employees %%
#inertial_fluent = currentlocation(#employee, #node).
#fluent = #inertial_fluent.

%% ACTIONS - Performed by the agent %%
#a_go = go_to(#agent(A), #node(N)).   
#action = #a_go.

predicates

edge(#node, #node).

holds(#fluent, #step).
occurs(#action, #step).

goal(#step).
success().
something_happened(#step).

rules

%% FLUENT RULES - Inertia axiom for fluents %%
holds(F, I+1):- #inertial_fluent(F), holds(F,I), not -holds(F, I+1).
-holds(F, I+1):- #inertial_fluent(F), -holds(F, I), not holds(F, I+1).
%------------------------------------------------------------------------------%
%% FLUENT RULES - Closed World Assumption (CWA) for inertial fluents %%
-holds(F, I):- not holds(F, I), #inertial_fluent(F).
%------------------------------------------------------------------------------%
%% ACTIONS RULES - Closed World Assumption (CWA) for actions %%
-occurs(A,I):- not occurs(A,I).
%------------------------------------------------------------------------------%
%% ACTIONS RULES - Non-simultaneity of actions %%
:- occurs(A1,I), occurs(A2,I), A1!=A2.
%------------------------------------------------------------------------------%

%% SIMPLE PLANNING MODULE %%
success:- goal(I).
:- not success.
occurs(A,I) | -occurs(A,I) :- not goal(I).
something_happened(I):- occurs(A,I).
:- goal(I), not goal(I-1), J<I, not something_happened(J).

holds(currentlocation(agent, d), 0).
holds(currentlocation(w1, a), 0).

%% DOMAIN RULES - Pathways in the restaurant %%
edge(a,b).
edge(b,c).
edge(c,d).
edge(d,e).  
edge(d,h).
edge(e,f).
edge(h,d).
%------------------------------------------------------------------------------%
% The edge relation is symmetric %
edge(N2, N1):- edge(N1, N2).
%------------------------------------------------------------------------------%
% If it is not known that there is an edge between nodes then there is not %
-edge(N1, N2):- not edge(N1, N2).
%------------------------------------------------------------------------------%

%% DOMAIN RULES - Locations of employees in the restaurant %%
% If an employee is not known to be at a certain location, then he is not %
-holds(currentlocation(E, N), I):- not holds(currentlocation(E, N), I).
%------------------------------------------------------------------------------%
% Two employees cannot share the same location %
-holds(currentlocation(E2, N), I):- holds(currentlocation(E1, N), I), E2 != E1.
%------------------------------------------------------------------------------%
% An employee can only have one current location at a time %
-holds(currentlocation(E, N2), I):- holds(currentlocation(E, N1), I), N2 != N1.

%% ACTIONS - Causal laws %%
% go_to(#agent, #node) %
holds(currentlocation(agent, N), I+1):- occurs(go_to(agent, N), I).
-holds(currentlocation(agent, M), I+1):- occurs(go_to(agent, N), I), M !=N.
%------------------------------------------------------------------------------%
%% ACTIONS - Executability conditions %%
% go_to(#agent, #node) %
-occurs(go_to(agent, N), I):- holds(currentlocation(agent, M), I), -edge(M, N).
-occurs(go_to(agent, N), I):- holds(currentlocation(agent, N), I).

goal(1):- holds(currentlocation(agent, e), 1).
