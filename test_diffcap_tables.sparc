#const tnum=2. % Total number of tables
#const maxcap=2. % Capacity of biggest table in restaurant
#maxint=12.


sorts
#step=0..1.
% Environment
#room = {mainroom, kitchen}.
#table = [table][1..tnum].
#chair = [chair][1..maxcap][t][1..tnum].
#furniture = #table + #chair.

#customer=[c][1..3].

#int = 1..12.

#fluent= isattable(#chair(Ch),#table(T))+ isfree(#furniture(Fr)) + isonchair(#customer(Cu),#chair(Ch)).

predicates
hascapacity(#int,#table).
currentoccupancy(#table, #int, #step).
holds(#fluent, #step).

rules 
hascapacity(2,table1).
hascapacity(2,table2).
%hascapacity(4,table3).
%hascapacity(4,table4).
holds(isattable(chair1t1,table1),0).
holds(isattable(chair2t1,table1),0).
holds(isattable(chair1t2,table1),0).
holds(isattable(chair2t2,table1),0).
holds(isonchair(c1,chair1t1),0).
%holds(isonchair(c2,chair2t1),0).

currentoccupancy(T,O, I):- O=#count{Ch:holds(isfree(Ch),I),holds(isattable(Ch,T),I)}.

%% Inertia axiom %%
holds(F, I+1):- #fluent(F), holds(F,I), not -holds(F, I+1).
-holds(F, I+1):- #fluent(F), -holds(F, I), not holds(F, I+1).

%% A chair is free unless stated otherwise
holds(isfree(Fr),I):- not -holds(isfree(Fr),I).

%% A chair is free if no customer is sitting on it %%
-holds(isfree(Fr),I):- #chair(Fr), holds(isonchair(Cu,Fr),I).

%% A table is not free if one of its associated chairs is free %%
-holds(isfree(Fr),I):- #table(Fr), -holds(isfree(Ch),I), holds(isattable(Ch,Fr),I).

%% Two customers cannot share the same chair at the same time %%
-holds(isonchair(Cu2,Ch),I):- holds(isonchair(Cu1,Ch),I), Cu1!=Cu2.

%% A customer cannot be on two chairs at the same time %% 
-holds(isonchair(Cu,Ch1),I):- holds(isonchair(Cu,Ch2),I), Ch1!=Ch2.

%% If customer Cu is not known to be on chair Ch at initial step, then he is not %%
-holds(isonchair(Cu, Ch), 0):- not holds(isonchair(Cu, Ch), 0).
