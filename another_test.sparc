
%------------------------------------------------------------------------------%
%% CONSTANTS - All of the necessary constants %%
% Number of steps to plan on %
#const n = 4.
% Maximum capacity within the tables % 
#const maxcap = 2.
% Total number of tables %
#const tnum = 2.
% Total number of customers %
% (will be updated each time a new client enters - index = order of arrival) %
#const cnum = 2.
% Total number of waiters %
#const wnum = 1.
%------------------------------------------------------------------------------%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
sorts
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#step = 0..n.
#num = 0..maxcap.
#boolean = {true, false}.
%------------------------------------------------------------------------------%
#table = [table][1..tnum].
#furniture = #table.
%------------------------------------------------------------------------------%
#node = {a, b, c, d, e, f, h}.
%------------------------------------------------------------------------------%
#customer = [c][1..cnum].
#waiter = [w][1..wnum].
#agent = {agent}.

#person = #customer + #waiter.
#employee = #waiter + #agent.
%------------------------------------------------------------------------------%
%% FLUENTS %%
#inertial_fluent = 
%% Locations of employees %%
                  currentlocation(#employee, #node)
%% Customers management %%
                + iswaiting(#customer)
                + iswith(#agent, #customer)
                + isattable(#customer, #table)
                + haspaid(#customer)
%% Payment %%
                + wantsbill(#table).
#defined_fluent_special = 
                  isfree(#furniture).

#defined_fluent = 
%% Tables occupancy %%
                   hasoccupancy(#table, #num).

#observable =      bill_wave(#table)
                 + has_entered(#customer).

#fluent = #inertial_fluent + #defined_fluent_special + #defined_fluent.
%------------------------------------------------------------------------------%
%% ACTIONS - Performed by the agent %%
#a_go = go_to(#agent(A), #node(N)).                  % Move from node to node
#a_pick = pick(#agent(A), #customer(Cu)).            % Pick up a (group of) customer(s)
#a_seat = seat(#agent(A), #customer(Cu), #table(T)). % Seat a (group of) customer(s)
#a_bill = give_bill(#agent(A), #table(T)).           % Give the bill to a table

#action = #a_go + #a_pick + #a_seat + #a_bill.
%------------------------------------------------------------------------------%
%% ACTIONS - To explain what the waiters can do %%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
predicates
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
hascapacity(#table, #num).
%------------------------------------------------------------------------------%
edge(#node, #node).
areassociated(#node, #furniture).
%------------------------------------------------------------------------------%
aretogethere(#customer, #customer).
%------------------------------------------------------------------------------%
holds(#fluent, #step).
occurs(#action, #step).
%------------------------------------------------------------------------------%
obs(#observable, #boolean, #step).
%------------------------------------------------------------------------------%
goal(#step).
success().
something_happened(#step).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
rules
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FLUENT RULES - Inertia axiom for fluents %%
holds(F, I+1):- #inertial_fluent(F), holds(F,I), not -holds(F, I+1).
-holds(F, I+1):- #inertial_fluent(F), -holds(F, I), not holds(F, I+1).
%------------------------------------------------------------------------------%
%% FLUENT RULES - Closed World Assumption (CWA) for inertial fluents %%
-holds(F, I):- not holds(F, I), #inertial_fluent(F).
%------------------------------------------------------------------------------%
%% ACTIONS RULES - Closed World Assumption (CWA) for actions %%
-occurs(A,I):- not occurs(A,I).
%------------------------------------------------------------------------------%
%% ACTIONS RULES - Non-simultaneity of actions %%
:- occurs(A1,I), occurs(A2,I), A1!=A2.
%------------------------------------------------------------------------------%
%% OBSERVATIONS RULES - Reality-check %
:- obs(F,true,I), -holds(F,I).
:- obs(F,false,I), holds(F,I).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% SIMPLE PLANNING MODULE %%
success:- goal(I).
:- not success.
occurs(A,I) | -occurs(A,I) :- not goal(I).
something_happened(I):- occurs(A,I).
:- goal(I), not goal(I-1), J<I, not something_happened(J).
%------------------------------------------------------------------------------%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%% GOALS TO BE SET BELOW: %%%%%%%%%%%%%%%%%%%%%%%%%%%%
%b_goal
goal(1):- holds(currentlocation(agent, e), 1).
%e_goal
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%------------------------------------------------------------------------------%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%% OBSERVATIONS TO BE SET BELOW: %%%%%%%%%%%%%%%%%%%%%%%%
%b_obs
%e_obs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%------------------------------------------------------------------------------%
%%%%%%%%%%%%%%%%%%%%%% INITIAL SITUATION TO BE SET BELOW: %%%%%%%%%%%%%%%%%%%%%%
% Fluent initial situation - Can be updated/modified %
%b_init
holds(currentlocation(agent, d), 0).
holds(currentlocation(w1, a), 0).
%e_init

% Static initial situation %
hascapacity(table1, 1).
hascapacity(table2, 2).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% DOMAIN RULES - Restaurant layout %%
% A table can only have one fixed capacity %
%-hascapacity(T, N):- not hascapacity(T, N).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% DOMAIN RULES - Pathways in the restaurant %%
edge(a,b).
edge(b,c).
edge(c,d).
edge(d,e).  
edge(d,h).
edge(e,f).
edge(h,d).
%------------------------------------------------------------------------------%
% The edge relation is symmetric %
edge(N2, N1):- edge(N1, N2).
%------------------------------------------------------------------------------%
% If it is not known that there is an edge between nodes then there is not %
-edge(N1, N2):- not edge(N1, N2).
%------------------------------------------------------------------------------%
%% DOMAIN RULES - Node/furniture association %%
%areassociated(f,table1).
%areassociated(f,table2).
%areassociated(h,table2).
%------------------------------------------------------------------------------%
% Two nodes that do not seem to be associated with a piece of furniture are not %
%-areassociated(N, F):- not areassociated(N, F).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% DOMAIN RULES - Locations of employees in the restaurant %%
% If an employee is not known to be at a certain location, then he is not %
-holds(currentlocation(E, N), I):- not holds(currentlocation(E, N), I).
%------------------------------------------------------------------------------%
% Two employees cannot share the same location %
-holds(currentlocation(E2, N), I):- holds(currentlocation(E1, N), I), E2 != E1.
%------------------------------------------------------------------------------%
% An employee can only have one current location at a time %
-holds(currentlocation(E, N2), I):- holds(currentlocation(E, N1), I), N2 != N1.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% DOMAIN RULES - Waiting to be seated %
% The agent cannot manage two groups at once %
%-holds(iswith(agent, Cu2), I):- holds(iswith(agent, Cu1), I), -aretogethere(Cu1, Cu2).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% DOMAIN RULES - Customer placement %%
% If a customer is not known to be at at table then he is not %
%-holds(isattable(Cu, T), I):- not holds(isattable(Cu, T), I).
%------------------------------------------------------------------------------%
% A customer cannot be at two tables at once %
%-holds(isattable(Cu, T2), I):- holds(isattable(Cu, T1), I), T2 != T1.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% DOMAIN RULES - Groups management %%
% The aretogethere relation is symmetric, transitive and reflexive %
%aretogethere(Cu2, Cu1):- aretogethere(Cu1, Cu2).
%aretogethere(Cu1, Cu3):- aretogethere(Cu1, Cu2), aretogethere(Cu2, Cu3).
%aretogethere(Cu, Cu).
%------------------------------------------------------------------------------%
% If two clients are not known to be togethere then they are not %
%-aretogethere(Cu1, Cu2):- not aretogethere(Cu1, Cu2), Cu2 != Cu1.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% DOMAIN RULES - Tables occupancy %%
% Current occupancy is determined by counting the # of clients at a table %
%holds(hasoccupancy(T, X), I):- X = #count{Cu : holds(isattable(Cu, T), I)}.
%------------------------------------------------------------------------------%
% A table is not free if its occupancy is not 0 %
%-holds(isfree(T), I):- holds(hasoccupancy(T, X), I), X != 0. 
%------------------------------------------------------------------------------%
% A table is free if its occupancy is 0 %
%holds(isfree(T), I):- holds(hasoccupancy(T, X), I), X=0.
%------------------------------------------------------------------------------%
% A table cannot have multiple occupancies %
%-holds(hasoccupancy(T, X2), I):- holds(hasoccupancy(T, X1), I), X2 != X1.
%------------------------------------------------------------------------------%
% The occupancy of a table cannot exceed its maximum capacity %
%-holds(hasoccupancy(T, X2), I):- hascapacity(T, X1), X2 > X1.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% ACTIONS - Causal laws %%
% go_to(#agent, #node) %
holds(currentlocation(agent, N), I+1):- occurs(go_to(agent, N), I).
%------------------------------------------------------------------------------%
%% ACTIONS - Executability conditions %%
% go_to(#agent, #node) %
-occurs(go_to(agent, N), I):- holds(currentlocation(agent, M), I), -edge(M, N).
-occurs(go_to(agent, N), I):- holds(currentlocation(E, N), I), #waiter(E).

% Rules to try to force the agent to have a location
%:- holds(currentlocation(agent, N1), I), -holds(currentlocation(agent, N2), I+1).
%holds(currentlocation(agent, N), I+1):- -occurs(go_to(agent, M), I), holds(currentlocation(agent, N), I).