%% Testing capacity/occupancy determination with tables %%

#const cnum=2. % Total number of customers
#const tnum=2. % Total number of tables
#const maxcap=2. % Maximum capacity of tables

% Number of steps %
#const n=1.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
sorts 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Step range %%
#step = 0..n.

#customer=[c][1..cnum].

#table = [table][1..tnum].
#chair = [chair][1..maxcap][t][1..tnum].
#furniture = #table + #chair. 

#inertial_fluent=
                    isonchair(#customer(Cu),#chair(Ch))
                    + isattable(#chair(Ch),#table(T))
                    + isfree(#customerfurniture(Fr)).

#fluent = #inertial_fluent.

%% For observations %%
#boolean = {true,false}.

%% For capacities %%
#integer=1..4.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
predicates
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Gestion of fluents %%
holds(#fluent, #step).

%% Gestion of observations %%
observed(#fluent, #boolean, #step).

%----------------------------------------------------------------------------------------%
%----------------------------------------------------------------------------------------%

%% For capacities %%
hascapacity(#integer,#table).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
rules
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Location of chairs at tables %%
holds(isattable(chair1t1, table1),0).
holds(isattable(chair2t1, table1),0).
holds(isattable(chair1t2, table2),0).
holds(isattable(chair2t2, table2),0).

%% Locations of customers %%
holds(isonchair(c2,chair2t2),0).

%% Inertia axiom %%
holds(F, I+1):- #inertial_fluent(F), holds(F,I), not -holds(F, I+1).
-holds(F, I+1):- #inertial_fluent(F), -holds(F, I), not holds(F, I+1).

%% Reality check %%
:- observed(F,true,I), -holds(F,I).
:- observed(F,false,I), holds(F,I).

%% CHAIRS %%
%% A chair is free unless stated otherwise %%
holds(isfree(Fr),I):- not -holds(isfree(Fr),I).
%----------------------------------------------------------------------------------------%
%% A chair is not free if a customer is sitting on it %%
-holds(isfree(Fr),I):- #chair(Fr), holds(isonchair(Cu,Fr),I).
holds(isfree(Fr),I+1):- #chair(Fr), holds(isonchair(Cu,Fr),I), occurs(seat_customer(Cu,Ch),I), Ch!=Fr.
%----------------------------------------------------------------------------------------%
%% Two customers cannot share the same chair at the same time %%
-holds(isonchair(Cu2,Ch),I):- holds(isonchair(Cu1,Ch),I), Cu1!=Cu2.
%----------------------------------------------------------------------------------------%
%% A customer cannot be on two chairs at the same time %% 
-holds(isonchair(Cu,Ch1),I):- holds(isonchair(Cu,Ch2),I), Ch1!=Ch2.
%----------------------------------------------------------------------------------------%
%% A chair cannot be at two tables at the same time %%
-holds(isattable(Ch,T2),I):- holds(isattable(Ch,T1),I), T2!=T1.
%----------------------------------------------------------------------------------------%
%% If customer Cu is not known to be on chair Ch at initial step, then he is not %%
-holds(isonchair(Cu, Ch), 0):- not holds(isonchair(Cu, Ch), 0).
%----------------------------------------------------------------------------------------%

%% TABLES %%
%% A table is not free if one of its associated chairs is not free %%
-holds(isfree(Fr),I):- #table(Fr), -holds(isfree(Ch),I), holds(isattable(Ch,Fr),I).


%----------------------------------------------------------------------------------------%
%----------------------------------------------------------------------------------------%

hascapacity(I,T):- 